buildscript {
	repositories {
		mavenLocal()
	}
	dependencies {
		classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
	}
}

plugins {
    id 'groovy'
    id 'java'
	id 'idea'
	id 'com.github.johnrengelman.shadow'
	id 'maven-publish'
}

apply plugin: 'asset-pipeline'

group 'com.morpheusdata'
version '1.1.0'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
	mavenLocal()
	mavenCentral()
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
	provided
}

assets {
	excludes = ['webjars/**','gulpfile.unminified.js']
	minifyJs = false
	packagePlugin = false //set to true if this is a library
}

dependencies {
	provided project(':morpheus-plugin-api')
	implementation "org.codehaus.groovy:groovy-all:$groovyVersion"
	implementation "org.slf4j:slf4j-api:$slf4jVersion"
	implementation "org.slf4j:slf4j-parent:$slf4jVersion"
	implementation 'org.apache.httpcomponents:httpclient:4.5.3'
	implementation 'org.apache.httpcomponents:httpcore:4.4.5'
	implementation 'com.google.http-client:google-http-client:1.28.0'
	implementation 'com.google.http-client:google-http-client-jackson2:1.28.0'
	implementation 'com.google.oauth-client:google-oauth-client:1.31.0'
	implementation 'com.google.api-client:google-api-client:1.28.0'
	implementation 'com.google.apis:google-api-services-compute:v1-rev235-1.25.0'
	implementation 'com.google.apis:google-api-services-storage:v1-rev148-1.25.0'
	implementation 'com.google.apis:google-api-services-cloudresourcemanager:v1-rev572-1.25.0'
	implementation 'com.google.apis:google-api-services-servicemanagement:v1-rev482-1.25.0'
	implementation 'com.google.apis:google-api-services-serviceusage:v1-rev231-1.25.0'
	implementation 'com.google.apis:google-api-services-bigquery:v2-rev20210529-1.31.0'
	implementation 'com.google.auth:google-auth-library-oauth2-http:0.24.0'

	// Include morpheus-core and it's dependencies
	testImplementation project(':morpheus-plugin-api')
	testImplementation 'io.reactivex.rxjava2:rxjava:2.2.0'
	testImplementation "org.slf4j:slf4j-parent:$slf4jVersion"

	testImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"
	testImplementation project(':morpheus-test-provider')
	testImplementation 'net.bytebuddy:byte-buddy:1.9.3'
	testImplementation 'org.objenesis:objenesis:2.6'
	testImplementation "org.spockframework:spock-core:$spockVersion"
	testImplementation 'cglib:cglib-nodep:3.2.12'
}

sourceSets {
	main {
		compileClasspath += configurations.provided
	}
}

jar {
	manifest {
		attributes(
				'Plugin-Class': 'com.morpheusdata.cloud.GooglePlugin',
				'Plugin-Version': archiveVersion.get()
		)
	}
}

java {
	withSourcesJar()
	withJavadocJar()
}

task morpheusJavaDoc(type: Javadoc) {
	source = sourceSets.main.allJava
	title = "Morpheus Core Docs"
}

task(console, dependsOn: 'classes', type: JavaExec) {
	main = 'groovy.ui.Console'
	classpath = sourceSets.main.runtimeClasspath
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId 'morpheus-test-provider'
			pom.withXml {
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name 'morpheus-cloud-plugin'
					description 'Morpheus Plugin API provides the core framework for implementing extension plugins for the morpheus platform'
					url 'https://github.com/bertramdev/morpheus-cloud-plugin'
					scm {
						url 'https://github.com/bertramdev/morpheus-core'
						connection 'scm:https://bertramdev@github.com/gomorpheus/morpheus-core.git'
						developerConnection 'scm:git://github.com/gomorpheus/morpheus-core.git'
					}
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/license/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'davydotcom'
							name 'David Estes'
							email 'davydotcom@gmail.com'
						}
					}
				}
			}
			from components.java
		}
	}
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}

tasks.withType(com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	destinationDirectory = file("$rootDir/plugins")
}

tasks.assemble.dependsOn tasks.shadowJar

