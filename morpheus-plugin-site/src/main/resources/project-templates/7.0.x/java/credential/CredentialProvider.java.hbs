package {{basePackage}};

import com.morpheusdata.model.AccountCredential;
import com.morpheusdata.model.AccountIntegration;
import com.morpheusdata.model.OptionType;
import com.morpheusdata.model.Icon;
import com.morpheusdata.core.MorpheusContext;
import com.morpheusdata.core.Plugin;
import com.morpheusdata.core.providers.CredentialProvider;
import com.morpheusdata.response.ServiceResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

/**
 * {{pluginNameCamel}}CredentialProvider is a credential provider for Morpheus.
 * It adds a new credential store type '{{pluginName}}' which can be created
 * to allow its credentials to be synced and used.
 * This also provides the ability to create, update and delete credentials.
 * 
 * @see CredentialProvider
 */
class {{pluginNameCamel}}CredentialProvider implements CredentialProvider {

	static Logger log = LoggerFactory.getLogger({{pluginNameCamel}}CredentialProvider.class);

	protected MorpheusContext morpheusContext;
	protected Plugin plugin;

	{{pluginNameCamel}}CredentialProvider(Plugin plugin, MorpheusContext morpheusContext) {
		this.morpheusContext = morpheusContext;
		this.plugin = plugin;
	}

    /**
	 * Returns the Morpheus Context for interacting with data stored in the Main Morpheus Application
	 *
	 * @return an implementation of the MorpheusContext for running Future based rxJava queries
	 */
	@Override
	public MorpheusContext getMorpheus() {
		return morpheusContext;
	}

	/**
	 * Returns the instance of the Plugin class that this provider is loaded from
	 * @return Plugin class contains references to other providers
	 */
	@Override
	public Plugin getPlugin() {
		return plugin;
	}

	/**
	 * A unique shortcode used for referencing the provided provider. Make sure this is going to be unique as any data
	 * that is seeded or generated related to this provider will reference it by this code.
	 * @return short code string that should be unique across all other plugin implementations.
	 */
	@Override
	public String getCode() {
		return "{{pluginCode}}-credential";
	}

	/**
	 * Provides the provider name for reference when adding to the Morpheus Orchestrator
	 * NOTE: This may be useful to set as an i18n key for UI reference and localization support.
	 *
	 * @return either an English name of a Provider or an i18n based key that can be scanned for in a properties file.
	 */
	@Override
	public String getName() {
		return "{{pluginName}}";
	}

    /**
	 * Returns the Credential Integration logo for display when a user needs to view or add this integration
	 * @since 0.12.3
	 * @return Icon representation of assets stored in the src/assets of the project.
	 */
	@Override
	public Icon getIcon() {
		Icon icon = new Icon();
		icon.setPath("morpheus.svg");
		icon.setDarkPath("morpheus.svg");
		return icon;
	}

	/**
	 * Provide custom configuration options when creating a new {@link AccountIntegration}
	 * @return a List of OptionType
	 */
	public List<OptionType> getIntegrationOptionTypes() {
		return new ArrayList<OptionType>();
	}

	/**
	 * Validation Method used to validate all inputs applied to the integration of an Credential Provider upon save.
	 * If an input fails validation or authentication information cannot be verified, Error messages should be returned
	 * via a {@link ServiceResponse} object where the key on the error is the field name and the value is the error message.
	 * If the error is a generic authentication error or unknown error, a standard message can also be sent back in the response.
	 *
	 * @param integration The Integration Object contains all the saved information regarding configuration of the Credential Provider.
	 * @param opts any custom payload submission options may exist here
	 * @return A response is returned depending on if the inputs are valid or not.
	 */
	public ServiceResponse<Map> verify(AccountIntegration integration, Map opts) {
		ServiceResponse<Map> rtn = new ServiceResponse<Map>();
		//todo: validate the integration settings
		rtn.setSuccess(true);
		//rtn.setMsg("The verify method has not yet been implemented");
		return rtn;
	}

	/**
	 * Periodically called to test the status of the credential provider.
	 * @param integration the referenced integration object to be loaded
	 */
	public void refresh(AccountIntegration integration) {
		//todo: sync in the credential data from the remote provider
	}

	/**
	 * Used to load credential information on the fly from the datastore. The data map should be the credential data to be loaded on the fly
	 * @param integration the referenced integration object to be loaded
	 * @param credential the credential reference to be loaded.
	 * @param opts any custom options such as proxySettings if necessary (future use)
	 * @return
	 */
	public ServiceResponse<Map> loadCredentialData(AccountIntegration integration, AccountCredential credential, Map opts) {
		ServiceResponse<Map> rtn = new ServiceResponse<Map>();
		// todo: connect to the remote service and perform the operation
		//Map credentialData = new Map<String,Object>();
		//rtn.setData(credentialData);
		//rtn.setSuccess(true);
		rtn.setMsg("The loadCredentialData method has not yet been implemented");
		return rtn;
	}

	/**
	 * Creates the credential on the remote integration.
	 * @param integration the referenced integration object containing information necessary to connect to the endpoint
	 * @param credential the credential to be created
	 * @param opts any custom options such as proxySettings if necessary (future use)
	 * @return
	 */
	public ServiceResponse<AccountCredential> createCredential(AccountIntegration integration, AccountCredential credential, Map opts) {
		ServiceResponse<AccountCredential> rtn = new ServiceResponse<AccountCredential>();
		// todo: connect to the remote service and perform the operation
		//rtn.setData(credential);
		//rtn.setSuccess(true);
		rtn.setMsg("The createCredential method has not yet been implemented");
		return rtn;
	}

	/**
	 * Updates the credential on the remote integration.
	 * @param integration the referenced integration object containing information necessary to connect to the endpoint
	 * @param credential the credential to be updated
	 * @param opts any custom options such as proxySettings if necessary (future use)
	 * @return
	 */
	public ServiceResponse<AccountCredential> updateCredential(AccountIntegration integration, AccountCredential credential, Map opts) {
		ServiceResponse<AccountCredential> rtn = new ServiceResponse<AccountCredential>();
		// todo: connect to the remote service and perform the operation
		//rtn.setData(credential);
		//rtn.setSuccess(true);
		rtn.setMsg("The updateCredential method has not yet been implemented");
		return rtn;
	}

	/**
	 * Deletes the credential on the remote integration.
	 * @param integration the referenced integration object containing information necessary to connect to the endpoint
	 * @param credential the credential to be deleted
	 * @param opts any custom options such as proxySettings if necessary (future use)
	 * @return
	 */
	public ServiceResponse<AccountCredential> deleteCredential(AccountIntegration integration, AccountCredential credential, Map opts) {
		ServiceResponse<AccountCredential> rtn = new ServiceResponse<AccountCredential>();
		// todo: connect to the remote service and perform the operation
		//rtn.setData(credential);
		//rtn.setSuccess(true);
		rtn.setMsg("The deleteCredential method has not yet been implemented");
		return rtn;
	}

}
