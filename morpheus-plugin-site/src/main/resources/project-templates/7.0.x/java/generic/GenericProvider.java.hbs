package {{basePackage}};

import com.morpheusdata.core.providers.AbstractGenericIntegrationProvider;
import com.morpheusdata.core.MorpheusContext;
import com.morpheusdata.core.Plugin;
import com.morpheusdata.views.HTMLResponse;
import com.morpheusdata.views.ViewModel;
import com.morpheusdata.model.AccountIntegration;
import groovy.util.logging.Slf4j;

import com.morpheusdata.model.OptionType;
import com.morpheusdata.model.Icon;

import java.util.List;
import java.util.ArrayList;

@Slf4j
class {{pluginNameCamel}}GenericProvider extends AbstractGenericIntegrationProvider {

	public static final String PROVIDER_CODE = "{{pluginCode}}.generic";
	public static final String PROVIDER_NAME = "{{pluginName}} Generic Provider";

	protected MorpheusContext context;
	protected Plugin plugin;

	{{pluginNameCamel}}GenericProvider(Plugin plugin, MorpheusContext context) {
		this.plugin = plugin;
		this.context = context;
	}

	/**
	 * The category of the integration. This is used to group integrations in the UI. Available categories are defined in {@link AccountIntegration.Category}.
	 * @return the category of the integration
	 */
	@Override
	public String getCategory() {
		return AccountIntegration.Category.other;
	}

	/**
	 * Returns the Integration logo for display when a user needs to view or add this integration
	 * @return Icon representation of assets stored in the src/assets of the project.
	 */
	@Override
	public Icon getIcon() {
		// TODO: change icon paths to correct filenames once added to your project
		Icon icon = new Icon();
		icon.setPath("morpheus.svg");
		icon.setDarkPath("morpheus.svg");

		return icon;
	}

	/**
	 * Refresh the integration with the latest data from the provider. This method will be called based on the integration refresh interval
	 * configured in the Morpheus Appliance UI settings.
	 * @param accountIntegration the integration to refresh
	 */
	@Override
	public void refresh(AccountIntegration accountIntegration) {
		//TODO: data syncing operations
	}

	/**
	 * Provide custom configuration options when creating a new {@link AccountIntegration}
	 * @return a List of OptionType
	 */
	@Override
	public List<OptionType> getOptionTypes() {
		List<OptionType> rtn = new ArrayList<>();
		OptionType option1 = new OptionType();
		option1.setName("Option 1");
		option1.setCode("generic.option.one");
		option1.setFieldName("One");
		option1.setDisplayOrder(0);
		option1.setFieldLabel("Option 1");
		option1.setRequired(true);
		option1.setInputType(OptionType.InputType.TEXT);
		rtn.add(option1);

		return rtn;
	}

	/**
	 * Integration details provided to your rendering engine
	 * @param integration details of an Instance
	 * @return result of rendering a template
	 */
	@Override
	public HTMLResponse renderTemplate(AccountIntegration integration) {
		ViewModel<AccountIntegration> model = new ViewModel<>();
		model.object = integration;
		return getRenderer().renderTemplate("hbs/show", model);
	}

	@Override
	public String getCode() {
		return PROVIDER_CODE;
	}

	@Override
	public String getName() {
		return PROVIDER_NAME;
	}

	@Override
	public MorpheusContext getMorpheus() {
		return this.context;
	}

	@Override
	public Plugin getPlugin() {
		return this.plugin;
	}
}
