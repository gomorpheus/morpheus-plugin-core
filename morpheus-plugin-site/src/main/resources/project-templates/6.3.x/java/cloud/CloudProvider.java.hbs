package {{basePackage}};

import com.morpheusdata.core.MorpheusContext;
import com.morpheusdata.core.Plugin;
import com.morpheusdata.core.providers.CloudProvider;
import com.morpheusdata.core.providers.PluginProvider;
import com.morpheusdata.core.providers.ProvisionProvider;
import com.morpheusdata.model.BackupProvider;
import com.morpheusdata.model.Cloud;
import com.morpheusdata.model.CloudFolder;
import com.morpheusdata.model.CloudPool;
import com.morpheusdata.model.ComputeServer;
import com.morpheusdata.model.ComputeServerType;
import com.morpheusdata.model.Datastore;
import com.morpheusdata.model.Icon;
import com.morpheusdata.model.Network;
import com.morpheusdata.model.NetworkSubnetType;
import com.morpheusdata.model.NetworkType;
import com.morpheusdata.model.OptionType;
import com.morpheusdata.model.StorageControllerType;
import com.morpheusdata.model.StorageVolumeType;
import com.morpheusdata.request.ValidateCloudRequest;
import com.morpheusdata.response.ServiceResponse;

import java.util.ArrayList;
import java.util.Collection;

class {{pluginNameCamel}}CloudProvider implements CloudProvider {
	public static final String CLOUD_PROVIDER_CODE = "{{pluginCode}}.cloud";

	protected MorpheusContext context;
	protected Plugin plugin;

	public {{pluginNameCamel}}CloudProvider(Plugin plugin, MorpheusContext ctx) {
		super();
		this.plugin = plugin;
		this.context = ctx;
	}

	/**
	 * Grabs the description for the CloudProvider
	 * @return String
	 */
	@Override
	public String getDescription() {
		return "Describe me!";
	}

	/**
	 * Returns the Cloud logo for display when a user needs to view or add this cloud. SVGs are preferred.
	 * @since 0.13.0
	 * @return Icon representation of assets stored in the src/assets of the project.
	 */
	@Override
	public Icon getIcon() {
		// TODO: change icon paths to correct filenames once added to your project
		Icon icon = new Icon();
		icon.setPath("cloud.svg");
		icon.setDarkPath("cloud-dark.svg");
		return icon;
	}

	/**
	 * Returns the circular Cloud logo for display when a user needs to view or add this cloud. SVGs are preferred.
	 * @since 0.13.6
	 * @return Icon
	 */
	@Override
	public Icon getCircularIcon() {
		// TODO: change icon paths to correct filenames once added to your project
		Icon icon = new Icon();
		icon.setPath("cloud-circular.svg");
		icon.setDarkPath("cloud-circular-dark.svg");
		return icon;
	}

	/**
	 * Provides a Collection of OptionType inputs that define the required input fields for defining a cloud integration
	 * @return Collection of OptionType
	 */
	@Override
	public Collection<OptionType> getOptionTypes() {
		Collection<OptionType> options = new ArrayList<OptionType>();
		return options;
	}

	/**
	 * Grabs available provisioning providers related to the target Cloud Plugin. Some clouds have multiple provisioning
	 * providers or some clouds allow for service based providers on top like (Docker or Kubernetes).
	 * @return Collection of ProvisionProvider
	 */
	@Override
	public Collection<ProvisionProvider> getAvailableProvisionProviders() {
		Collection<ProvisionProvider> providers = new ArrayList<ProvisionProvider>();
		for (PluginProvider provider : this.plugin.getProvidersByType(ProvisionProvider.class)) {
			providers.add((ProvisionProvider)provider);
		}
		return providers;
	}

	/**
	 * Grabs available backup providers related to the target Cloud Plugin.
	 * @return Collection of BackupProvider
	 */
	@Override
	public Collection<BackupProvider> getAvailableBackupProviders() {
		Collection<BackupProvider> providers = new ArrayList<BackupProvider>();
		return providers;
	}

	/**
	 * Provides a Collection of {@link NetworkType} related to this CloudProvider
	 * @return Collection of NetworkType
	 */
	@Override
	public Collection<NetworkType> getNetworkTypes() {
		Collection<NetworkType> networks = new ArrayList<NetworkType>();
		return networks;
	}

	/**
	 * Provides a Collection of {@link NetworkSubnetType} related to this CloudProvider
	 * @return Collection of NetworkSubnetType
	 */
	@Override
	public Collection<NetworkSubnetType> getSubnetTypes() {
		Collection<NetworkSubnetType> subnets = new ArrayList<NetworkSubnetType>();
		return subnets;
	}

	/**
	 * Provides a Collection of {@link StorageVolumeType} related to this CloudProvider
	 * @return Collection of StorageVolumeType
	 */
	@Override
	public Collection<StorageVolumeType> getStorageVolumeTypes() {
		Collection<StorageVolumeType> volumeTypes = new ArrayList<StorageVolumeType>();
		return volumeTypes;
	}

	/**
	 * Provides a Collection of {@link StorageControllerType} related to this CloudProvider
	 * @return Collection of StorageControllerType
	 */
	@Override
	public Collection<StorageControllerType> getStorageControllerTypes() {
		Collection<StorageControllerType> controllerTypes = new ArrayList<StorageControllerType>();
		return controllerTypes;
	}

	/**
	 * Grabs all {@link ComputeServerType} objects that this CloudProvider can represent during a sync or during a provision.
	 * @return collection of ComputeServerType
	 */
	@Override
	public Collection<ComputeServerType> getComputeServerTypes() {
		Collection<ComputeServerType> serverTypes = new ArrayList<ComputeServerType>();
		return serverTypes;
	}

	/**
	 * Validates the submitted cloud information to make sure it is functioning correctly.
	 * If a {@link ServiceResponse} is not marked as successful then the validation results will be
	 * bubbled up to the user.
	 * @param cloudInfo cloud
	 * @param validateCloudRequest Additional validation information
	 * @return ServiceResponse
	 */
	@Override
	public ServiceResponse validate(Cloud cloudInfo, ValidateCloudRequest validateCloudRequest) {
		return ServiceResponse.success();
	}

	/**
	 * Called when a Cloud From Morpheus is first saved. This is a hook provided to take care of initial state
	 * assignment that may need to take place.
	 * @param cloudInfo instance of the cloud object that is being initialized.
	 * @return ServiceResponse
	 */
	@Override
	public ServiceResponse initializeCloud(Cloud cloudInfo) {
		return ServiceResponse.success();
	}

	/**
	 * Zones/Clouds are refreshed periodically by the Morpheus Environment. This includes things like caching of brownfield
	 * environments and resources such as Networks, Datastores, Resource Pools, etc.
	 * @param cloudInfo cloud
	 * @return ServiceResponse. If ServiceResponse.success == true, then Cloud status will be set to Cloud.Status.ok. If
	 * ServiceResponse.success == false, the Cloud status will be set to ServiceResponse.data['status'] or Cloud.Status.error
	 * if not specified. So, to indicate that the Cloud is offline, return `ServiceResponse.error('cloud is not reachable', null, [status: Cloud.Status.offline])`
	 */
	@Override
	public ServiceResponse refresh(Cloud cloudInfo) {
		return ServiceResponse.success();
	}

	/**
	 * Zones/Clouds are refreshed periodically by the Morpheus Environment. This includes things like caching of brownfield
	 * environments and resources such as Networks, Datastores, Resource Pools, etc. This represents the long term sync method that happens
	 * daily instead of every 5-10 minute cycle
	 * @param cloudInfo cloud
	 */
	@Override
	public void refreshDaily(Cloud cloudInfo) {
	}

	/**
	 * Called when a Cloud From Morpheus is removed. This is a hook provided to take care of cleaning up any state.
	 * @param cloudInfo instance of the cloud object that is being removed.
	 * @return ServiceResponse
	 */
	@Override
	public ServiceResponse deleteCloud(Cloud cloudInfo) {
		return ServiceResponse.success();
	}

	/**
	 * Returns whether the cloud supports {@link CloudPool}
	 * @return Boolean
	 */
	@Override
	public Boolean hasComputeZonePools() {
		return false;
	}

	/**
	 * Returns whether a cloud supports {@link Network}
	 * @return Boolean
	 */
	@Override
	public Boolean hasNetworks() {
		return true;
	}

	/**
	 * Returns whether a cloud supports {@link CloudFolder}
	 * @return Boolean
	 */
	@Override
	public Boolean hasFolders() {
		return false;
	}

	/**
	 * Returns whether a cloud supports {@link Datastore}
	 * @return Boolean
	 */
	@Override
	public Boolean hasDatastores() {
		return true;
	}

	/**
	 * Returns whether a cloud supports bare metal VMs
	 * @return Boolean
	 */
	@Override
	public Boolean hasBareMetal() {
		return false;
	}

	/**
	 * Indicates if the cloud supports cloud-init. Returning true will allow configuration of the Cloud
	 * to allow installing the agent remotely via SSH /WinRM or via Cloud Init
	 * @return Boolean
	 */
	@Override
	public Boolean hasCloudInit() {
		return true;
	}

	/**
	 * Indicates if the cloud supports the distributed worker functionality
	 * @return Boolean
	 */
	@Override
	public Boolean supportsDistributedWorker() {
		return false;
	}

	/**
	 * Called when a server should be started. Returning a response of success will cause corresponding updates to usage
	 * records, result in the powerState of the computeServer to be set to 'on', and related instances set to 'running'
	 * @param computeServer server to start
	 * @return ServiceResponse
	 */
	@Override
	public ServiceResponse startServer(ComputeServer computeServer) {
		return ServiceResponse.success();
	}

	/**
	 * Called when a server should be stopped. Returning a response of success will cause corresponding updates to usage
	 * records, result in the powerState of the computeServer to be set to 'off', and related instances set to 'stopped'
	 * @param computeServer server to stop
	 * @return ServiceResponse
	 */
	@Override
	public ServiceResponse stopServer(ComputeServer computeServer) {
		return ServiceResponse.success();
	}

	/**
	 * Called when a server should be deleted from the Cloud.
	 * @param computeServer server to delete
	 * @return ServiceResponse
	 */
	@Override
	public ServiceResponse deleteServer(ComputeServer computeServer) {
		return ServiceResponse.success();
	}

	/**
	 * Grabs the singleton instance of the provisioning provider based on the code defined in its implementation.
	 * Typically Providers are singleton and instanced in the {@link Plugin} class
	 * @param providerCode String representation of the provider short code
	 * @return the ProvisionProvider requested
	 */
	@Override
	public ProvisionProvider getProvisionProvider(String providerCode) {
		ProvisionProvider ret = null;
		for (ProvisionProvider provider : getAvailableProvisionProviders()) {
			if (provider.getCode().equals(providerCode)) {
				ret = provider;
				break;
			}
		}
		return ret;
	}

	/**
	 * Returns the default provision code for fetching a {@link ProvisionProvider} for this cloud.
	 * This is only really necessary if the provision type code is the exact same as the cloud code.
	 * @return the provision provider code
	 */
	@Override
	public String getDefaultProvisionTypeCode() {
		return {{pluginNameCamel}}ProvisionProvider.PROVISION_PROVIDER_CODE;
	}

	/**
	 * Returns the Morpheus Context for interacting with data stored in the Main Morpheus Application
	 * @return an implementation of the MorpheusContext for running Future based rxJava queries
	 */
	@Override
	public MorpheusContext getMorpheus() {
		return this.context;
	}

	/**
	 * Returns the instance of the Plugin class that this provider is loaded from
	 * @return Plugin class contains references to other providers
	 */
	@Override
	public Plugin getPlugin() {
		return this.plugin;
	}

	/**
	 * A unique shortcode used for referencing the provided provider. Make sure this is going to be unique as any data
	 * that is seeded or generated related to this provider will reference it by this code.
	 * @return short code string that should be unique across all other plugin implementations.
	 */
	@Override
	public String getCode() {
		return CLOUD_PROVIDER_CODE;
	}

	/**
	 * Provides the provider name for reference when adding to the Morpheus Orchestrator
	 * NOTE: This may be useful to set as an i18n key for UI reference and localization support.
	 *
	 * @return either an English name of a Provider or an i18n based key that can be scanned for in a properties file.
	 */
	@Override
	public String getName() {
		return "{{pluginName}}";
	}
}
