package {{basePackage}}

import com.morpheusdata.core.MorpheusContext
import com.morpheusdata.core.Plugin
import com.morpheusdata.core.network.loadbalancer.LoadBalancerProvider
import com.morpheusdata.model.Icon
import com.morpheusdata.model.NetworkLoadBalancer
import com.morpheusdata.model.NetworkLoadBalancerInstance
import com.morpheusdata.model.NetworkLoadBalancerType
import com.morpheusdata.model.OptionType
import com.morpheusdata.response.ServiceResponse

class {{pluginNameCamel}}LoadBalancerProvider implements LoadBalancerProvider {
	protected MorpheusContext morpheusContext
	protected Plugin plugin

	{{pluginNameCamel}}LoadBalancerProvider(Plugin plugin, MorpheusContext morpheusContext) {
		super()
		this.@morpheusContext = morpheusContext
		this.@plugin = plugin
	}

	/**
	 * Grabs the description for the LoadBalancerProvider
	 * @return String
	 */
	@Override
	String getDescription() {
		return 'describe me!'
	}

	/**
	 * Returns the load balancer logo for display when a user needs to view or add this load balancer. SVGs are preferred.
	 * @since 0.13.0
	 * @return Icon representation of assets stored in the src/assets of the project.
	 */
	@Override
	Icon getIcon() {
		return null
	}

	/**
	 * Provides a Collection of OptionType inputs that define the required input fields for defining a load balancer integration
	 * @return Collection of OptionType
	 */
	@Override
	Collection<OptionType> getOptionTypes() {
		return []
	}

	/**
	 * Provides a collection of network load balancer types that need to be configured in the morpheus environment along
	 * with the various child entities required by the load balancer
	 * @return Collection of NetworkLoadBalancerType
	 */
	@Override
	Collection<NetworkLoadBalancerType> getLoadBalancerTypes() {
		return []
	}

	/**
	 * Validates the user submitted load balancer connection information to ensure the appliance can communicate with it.
	 * If a {@link ServiceResponse} is not marked as successful then the validation results will be
	 * bubbled up to the user.
	 * @param loadBalancer {@link NetworkLoadBalancer}
	 * @param opts a map of additional optional properties
	 * @return ServiceResponse.  If ServiceResponse.success == false, ServiceResponse.errors will contain reasons.
	 */
	@Override
	ServiceResponse validate(NetworkLoadBalancer loadBalancer, Map opts) {
		return ServiceResponse.success()
	}

	/**
	 * Implement this method to handle morpheus setting up a load balancer pool from a morpheus instance.  This operation
	 * should handle every operation necessary to setup a load balanced pool for one or more vms/containers within a morpheus
	 * instance
	 * @param instance {@link NetworkLoadBalancerInstance}
	 * @return {@link ServiceResponse}
	 */
	@Override
	ServiceResponse addInstance(NetworkLoadBalancerInstance instance) {
		return ServiceResponse.success()
	}

	/**
	 * Implement this method to remove all entities involved in a {@link NetworkLoadBalancerInstance} such ass policies, pools,
	 * profiles, nodes, virtual servers, etc.  This method should clean said entities from the load balancer integration itself
	 * @param instance {@link NetworkLoadBalancerInstance}
	 * @return {@link ServiceResponse}
	 */
	@Override
	ServiceResponse removeInstance(NetworkLoadBalancerInstance instance) {
		return ServiceResponse.success()
	}

	/**
	 * Implement this method to update all entities involved in a {@link NetworkLoadBalancerInstance} such as policies, pools,
	 * profiles, nodes, virtual servers, etc.  This method is usually called when a node is added/removed from an instance
	 * @param instance {@link NetworkLoadBalancerInstance}
	 * @return {@link ServiceResponse}
	 */
	@Override
	ServiceResponse updateInstance(NetworkLoadBalancerInstance instance) {
		return ServiceResponse.success()
	}

	/**
	 * Returns the Morpheus Context for interacting with data stored in the Main Morpheus Application
	 *
	 * @return an implementation of the MorpheusContext for running Future based rxJava queries
	 */
	@Override
	MorpheusContext getMorpheus() {
		return this.@morpheusContext
	}

	/**
	 * Returns the instance of the Plugin class that this provider is loaded from
	 * @return Plugin class contains references to other providers
	 */
	@Override
	Plugin getPlugin() {
		return this.@plugin
	}

	/**
	 * A unique shortcode used for referencing the provided provider. Make sure this is going to be unique as any data
	 * that is seeded or generated related to this provider will reference it by this code.
	 * @return short code string that should be unique across all other plugin implementations.
	 */
	@Override
	String getCode() {
		return '{{pluginCode}}-loadBalancer'
	}

	/**
	 * Provides the provider name for reference when adding to the Morpheus Orchestrator
	 * NOTE: This may be useful to set as an i18n key for UI reference and localization support.
	 *
	 * @return either an English name of a Provider or an i18n based key that can be scanned for in a properties file.
	 */
	@Override
	String getName() {
		return '{{pluginName}}'
	}
}
