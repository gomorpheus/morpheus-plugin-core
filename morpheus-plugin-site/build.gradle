buildscript {
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:4.3.1'
    }
}


plugins {
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id("groovy") 
    id("com.github.johnrengelman.shadow")
    id("io.micronaut.application") version "4.0.3"
    id("io.micronaut.aot") version "4.0.3"
}

apply plugin: "asset-pipeline"

group "com.morpheusdata"

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation 'com.bertramlabs.plugins:asset-pipeline-micronaut:4.3.1'
    assets 'com.bertramlabs.plugins:less-asset-pipeline:4.3.1'
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    compileOnly("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
	implementation 'org.yaml:snakeyaml:1.33'
	implementation 'com.github.jknack:handlebars:4.3.0'


	runtimeOnly("ch.qos.logback:logback-classic")
    
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

}

test.classpath += configurations.developmentOnly

mainClassName = "com.morpheus.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.17')
    targetCompatibility = JavaVersion.toVersion('1.17')
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

shadowJar {
    mergeServiceFiles()
}



assets {
  // developmentRuntime = false
  from "${project.projectDir}/src/assets"
  // from 'morpheus-plugin-site/src/assets'
}


micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("test.mn.*")
    }
    aot {
    // Please review carefully the optimizations enabled below
    // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
    }
}


task copyManual(type: Copy, dependsOn: ':morpheus-plugin-docs:asciidoctor') {
    from new File(project(':morpheus-plugin-docs').buildDir,'/docs')
    into 'src/main/resources/'
}

task copyApiDoc(type: Copy, dependsOn: ':morpheus-plugin-api:javadoc') {
    from new File(project(':morpheus-plugin-api').buildDir,'/docs')
    into 'src/main/resources/'
}


[ tasks.run].each { runTask ->
    configure(runTask) {
        systemProperties System.properties
    }
}

tasks.shadowJar.dependsOn assetCompile
tasks.assetCompile.dependsOn processResources
tasks.processResources.dependsOn copyManual
tasks.processResources.dependsOn copyApiDoc
tasks.assetCompile.dependsOn copyManual
